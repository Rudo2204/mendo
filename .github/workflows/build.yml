# https://github.com/rust-lang/rust/blob/master/.github/workflows/ci.yml
# https://github.com/launchbadge/sqlx/blob/master/.github/workflows/sqlx.yml
# https://github.com/dh1tw/remoteAudio/blob/master/.github/workflows/build.yml
# https://github.com/actions-rs
# TODO: Set CRATE_NAME to match the project name
name: CI
env:
  CRATE_NAME: mendo

on: [push, pull_request]

jobs:
  lints:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    name: Lints
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install Dbus
        shell: bash
        run: |
          sudo apt install -y libdbus-1-dev

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-lints-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-lints-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: clippy
          args: -- -D warnings

  check:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    name: CI Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Dbus
        shell: bash
        run: |
          sudo apt install -y libdbus-1-dev

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-check-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked

  build:
    needs: check
    name: Build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: .exe
          - os: macOS-latest
            target: x86_64-apple-darwin

    steps:
      - uses: actions/checkout@v2

      - name: Install Dbus
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt install -y libdbus-1-dev

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --target=${{ matrix.target }}

      - uses: svenstaro/upx-action@2.0.1
        with:
          file: target/${{ matrix.target }}/release/${{ env.CRATE_NAME }}${{ matrix.suffix }}
          args: --best
          strip: true

      - uses: actions/upload-artifact@master
        with:
          name: ${{ env.CRATE_NAME }}-${{ matrix.target }}${{ matrix.suffix }}
          path: target/${{ matrix.target }}/release/${{ env.CRATE_NAME }}${{ matrix.suffix }}

      - name: Get VERSION
        if: startsWith(github.ref, 'refs/tags/v')
        id: get_version
        shell: bash
        run: |
          echo "::set-output name=VERSION::${GITHUB_REF#refs/tags/}"

      - name: Renaming file before uploading
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        shell: bash
        run: |
          cp target/${{ matrix.target }}/release/${{ env.CRATE_NAME }}${{ matrix.suffix }} ${{ env.CRATE_NAME }}-$VERSION-${{ matrix.target }}${{ matrix.suffix }}

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          draft: true
          prerelease: false
          files: ${{ env.CRATE_NAME }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}${{ matrix.suffix }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

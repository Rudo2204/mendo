# https://github.com/rust-lang/rust/blob/master/.github/workflows/ci.yml
# https://github.com/launchbadge/sqlx/blob/master/.github/workflows/sqlx.yml
# https://github.com/dh1tw/remoteAudio/blob/master/.github/workflows/build.yml
# https://github.com/actions-rs
# TODO: Set CRATE_NAME to match the project name
# TODO: Add `test` and more if you need to.
# TODO: Change bin to lib or both if you build a library
name: mendo

on:
  push:
    branches:
      - master
    tags:
      - 'v*' # matches v0.2, v1.0, v2.15.23, ect.
  pull_request:

jobs:
  lints:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    name: Lints
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-lints-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-lints-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: clippy
          args: -- -D warnings

  check:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    name: CI Check
    runs-on: ubuntu-latest
    steps:
      - name: Set CRATE_NAME
        id: set_crate_name
        run: echo ::set-output name=CRATE_NAME::mendo

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-check-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path ${{ steps.set_crate_name.outputs.CRATE_NAME }}/Cargo.toml --bin ${{ steps.set_crate_name.outputs.CRATE_NAME }} --locked

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: check
    name: Release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        # Can also use this section to pass args depending on the running os, see 2nd link!
        # TODO: Change the name here
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: target/release/mendo
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: target/release/mendo.exe
          - os: macOS-latest
            target: x86_64-apple-darwin
            bin: target/release/mendo

    steps:
      - name: Set CRATE_NAME
        id: set_crate_name
        run: echo ::set-output name=CRATE_NAME::mendo

      - name: Get VERSION
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-release-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - uses: actions-rs/cargo@v1
        env:
          CRATE_NAME: ${{ steps.set_crate_name.outputs.CRATE_NAME }}
        with:
          use-cross: true
          command: build
          args: --manifest-path $CRATE_NAME/Cargo.toml --bin $CRATE_NAME --release --locked

      - uses: svenstaro/upx-action@2.0.1
        with:
          file: ${{ matrix.bin }}
          args: --best
          strip: true

      - uses: edgarrc/action-7z@v1.0.4
        env:
          CRATE_NAME: ${{ steps.set_crate_name.outputs.CRATE_NAME }}
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        with:
          args: 7z a -t7z $CRATE_NAME-$VERSION-${{ matrix.target}}.7z ${{ matrix.bin }}

      - name: Prepare artifact
        id: prepare_artifact
        env:
          CRATE_NAME: ${{ steps.set_crate_name.outputs.CRATE_NAME }}
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          echo ::set-output name=ARTIFACT_PATH::./$CRATE_NAME-$VERSION-${{ matrix.target }}.7z
          echo ::set-output name=ARTIFACT_NAME::$CRATE_NAME-$VERSION-${{ matrix.target }}.7z

      - uses: actions/create-release@v1
        id: create_release
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            tag_name: ${{ github.ref }}
            release_name: Release ${{ github.ref }}
            draft: true
            prerelease: false

      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prepare_artifact.outputs.ARTIFACT_PATH }}
          asset_name: ${{ steps.prepare_artifact.outputs.ARTIFACT_NAME }}
          asset_content_type: application/x-7z-compressed
